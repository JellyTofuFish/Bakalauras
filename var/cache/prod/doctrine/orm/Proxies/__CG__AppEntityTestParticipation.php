<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class TestParticipation extends \App\Entity\TestParticipation implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\TestParticipation' . "\0" . 'id', '' . "\0" . 'App\\Entity\\TestParticipation' . "\0" . 'private_code', '' . "\0" . 'App\\Entity\\TestParticipation' . "\0" . 'is_test_over', '' . "\0" . 'App\\Entity\\TestParticipation' . "\0" . 'test_started_at', '' . "\0" . 'App\\Entity\\TestParticipation' . "\0" . 'test_ended_at', '' . "\0" . 'App\\Entity\\TestParticipation' . "\0" . 'fk_test', '' . "\0" . 'App\\Entity\\TestParticipation' . "\0" . 'participantAnswers'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\TestParticipation' . "\0" . 'id', '' . "\0" . 'App\\Entity\\TestParticipation' . "\0" . 'private_code', '' . "\0" . 'App\\Entity\\TestParticipation' . "\0" . 'is_test_over', '' . "\0" . 'App\\Entity\\TestParticipation' . "\0" . 'test_started_at', '' . "\0" . 'App\\Entity\\TestParticipation' . "\0" . 'test_ended_at', '' . "\0" . 'App\\Entity\\TestParticipation' . "\0" . 'fk_test', '' . "\0" . 'App\\Entity\\TestParticipation' . "\0" . 'participantAnswers'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (TestParticipation $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getPrivateCode(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrivateCode', []);

        return parent::getPrivateCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrivateCode(?string $private_code): \App\Entity\TestParticipation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrivateCode', [$private_code]);

        return parent::setPrivateCode($private_code);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsTestOver(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsTestOver', []);

        return parent::getIsTestOver();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsTestOver(?bool $is_test_over): \App\Entity\TestParticipation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsTestOver', [$is_test_over]);

        return parent::setIsTestOver($is_test_over);
    }

    /**
     * {@inheritDoc}
     */
    public function getTestStartedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTestStartedAt', []);

        return parent::getTestStartedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setTestStartedAt(): \App\Entity\TestParticipation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTestStartedAt', []);

        return parent::setTestStartedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getTestEndedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTestEndedAt', []);

        return parent::getTestEndedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setTestEndedAt(?\DateTimeInterface $test_ended_at): \App\Entity\TestParticipation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTestEndedAt', [$test_ended_at]);

        return parent::setTestEndedAt($test_ended_at);
    }

    /**
     * {@inheritDoc}
     */
    public function getFkTest(): ?\App\Entity\Test
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFkTest', []);

        return parent::getFkTest();
    }

    /**
     * {@inheritDoc}
     */
    public function setFkTest(?\App\Entity\Test $fk_test): \App\Entity\TestParticipation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFkTest', [$fk_test]);

        return parent::setFkTest($fk_test);
    }

    /**
     * {@inheritDoc}
     */
    public function getParticipantAnswers(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParticipantAnswers', []);

        return parent::getParticipantAnswers();
    }

    /**
     * {@inheritDoc}
     */
    public function addParticipantAnswer(\App\Entity\participantanswer $participantAnswer): \App\Entity\TestParticipation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addParticipantAnswer', [$participantAnswer]);

        return parent::addParticipantAnswer($participantAnswer);
    }

    /**
     * {@inheritDoc}
     */
    public function removeParticipantAnswer(\App\Entity\participantanswer $participantAnswer): \App\Entity\TestParticipation
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeParticipantAnswer', [$participantAnswer]);

        return parent::removeParticipantAnswer($participantAnswer);
    }

}
